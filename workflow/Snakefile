# TODO: change runtime formatting in config

# PREAMBLE #

# set glob wildcards
(
    SAMPLE,
    FRAC,
) = glob_wildcards(config["path"]["input"] + "/{sample}_{fraction}.fastq.gz")

# remove duplicates
SAMPLE = list(set(SAMPLE))
FRAC = list(set(FRAC))
config["path"]["temp"] = config["path"]["temp"]

onstart:
    touch(config["path"]["temp"])
    print("Samples: " + ", ".join(SAMPLE))


# GLOBAL FUNCTIONS #

def get_checkv_threshold(threshold):
    """
    Gets the threshold for checkv wuality control.
    """
    if threshold.lower() == "complete":
        return "$8~/(Complete)/"
    elif threshold.lower() == "high":
        return "$8~/(High-quality|Complete)/"
    elif threshold.lower() == "medium":
        return "$8~/(Medium-quality|High-quality|Complete)/"
    elif threshold.lower() == "low":
        return "$8~/(Low-quality|Medium-quality|High-quality|Complete)/"
    elif threshold.lower() == "not-determined":
        return "$8~/(Not-determined|Low-quality|Medium-quality|High-quality|Complete)/"
    else:
        return "$8~/(Medium-quality|High-quality|Complete)/"


def vibrant_virome(is_virome):
    """
    Gathers if the input is virome.
    """
    if is_virome.lower == "yes":
        return "-virome"
    else:
        return ""


# QUALITY CONTROL #

rule fastqc_raw:
    input:
        expand(
            config["path"]["input"] + "/{sample}_{fraction}.fastq.gz",
            sample=SAMPLE,
            fraction=FRAC,
        ),
    output:
        dir = directory(config["path"]["output"] + "/fastqc_raw/"),
        report = expand(
            config["path"]["output"] + "/fastqc_raw/{sample}_{fraction}_fastqc.html",
            sample=SAMPLE,
            fraction=FRAC,
        ),
    threads: config["threads"]
    conda:
        config["path"]["envs"] + "/fastqc.yaml"
    message:
        "Executing FASTQC quality control on raw reads from: {input}."
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["tiny_time"],
    log:
            config["path"]["log"] + "/fastqc_raw.log",
    benchmark:
        config["path"]["benchmark"] + "/fastqc_raw.txt",
    shell:
        """
        mkdir -p {output.dir}
        fastqc -o {output.dir} {input} &> {log}
        """

rule fastp_pe:
    """
    Performes quality control/pre-processing of the raw reads
    """
    input:
        R1 = expand(
            config["path"]["input"] + "/{sample}_1.fastq.gz",
            sample=SAMPLE,
        ),
        R2 = expand(
            config["path"]["input"] + "/{sample}_2.fastq.gz",
            sample=SAMPLE,
        ),
    output:
        dir = directory(config["path"]["output"] + "/fastp_pe/"),
        R1 = expand(
            config["path"]["output"] + "/fastp_pe/{sample}_1.fastq",
            sample=SAMPLE,
        ),
        R2 = expand(
            config["path"]["output"] + "/fastp_pe/{sample}_2.fastq",
            sample=SAMPLE,
        ),
        html = expand(
            config["path"]["output"] + "/fastp_pe/{sample}.html",
            sample=SAMPLE,
        ),
        json = expand(
            config["path"]["output"] + "/fastp_pe/{sample}.json",
            sample=SAMPLE,
        ),
    log:
        config["path"]["log"] + "/fastp_pe.log",
    benchmark:
            config["path"]["benchmark"] + "/fastp_pe.txt",
    resources:
        mem_mb=config["normal_mem"],
        # runtime=config["normal_time"],
    conda:
        config["path"]["envs"] + "/fastp.yaml"
    threads: config["threads"]
    shell:
        """
        mkdir -p {output.dir}
        fastp -i {input.R1} -I {input.R2} -o {output.R1} -O {output.R2}\
        -h {output.html} -j {output.json}\
        &> {log}
        """

rule fastqc_qc:
    """
    Performes quality control of processed QC reads
    """
    input:
        rules.fastp_pe.output.R1,
        rules.fastp_pe.output.R2,
    output:
        dir = directory(config["path"]["output"] + "/fastqc_qc/"),
        report = expand(
            config["path"]["output"] + "/fastqc_qc/{sample}_{fraction}_fastqc.html",
            sample=SAMPLE,
            fraction=FRAC,
        ),
    threads: config["threads"]
    conda:
        config["path"]["envs"] + "/fastqc.yaml"
    message:
        "Executing FASTQC quality control on trimmed reads from:{input} files."
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["tiny_time"],
    log:
        config["path"]["log"] + "/fastqc_qc.log",
    benchmark:
            config["path"]["benchmark"] + "/fastqc_qc.txt",
    shell:
        """
        mkdir -p {output.dir}
        fastqc {input} -o {output.dir} &> {log}
        """

rule qc:
    input:
        rules.fastqc_raw.output,
        rules.fastp_pe.output,
        rules.fastqc_qc.output,
    output:
        config["path"]["temp"] + "/finished_qc"
    threads: 1
    shell:
        """
        touch {output}
        """


# ASSEMBLY #

rule metaSpades:
    """
    Assembles all sequences with metaSpades
    """
    input:
        R1 = rules.fastp_pe.output.R1,
        R2 = rules.fastp_pe.output.R2,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/metaSpades/{sample}/",
            sample=SAMPLE,
        )),
        contigs = expand(
            config["path"]["output"] + "/metaSpades/{sample}/contigs.fasta",
            sample=SAMPLE,
        ),
        scaffolds = expand(
            config["path"]["output"] + "/metaSpades/{sample}/scaffolds.fasta",
            sample=SAMPLE,
        ),
    params:
        temp_dir = config["path"]["temp"] + "/metaSpades/",
    message:
        "Executing assembly of paired end files R1: {input.R1} and on R2: {input.R2}"
    conda:
        config["path"]["envs"] + "/metaSpades.yaml"
    log:
        config["path"]["log"] + "/metaSpades.log",
    benchmark:
            config["path"]["benchmark"] + "/metaSpades.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["big_mem"],
        # runtime=config["big_time"],
    shell:
        """
        mkdir -p {output.dir}
        metaspades.py -1 {input.R1} -2 {input.R2} -o {output.dir}\
        --tmp-dir {params.temp_dir} -t {threads}\
        &> {log}
        """

rule metaQUAST:
    """
    Performes quality control on all assembled contigs
    with the reference database RefSeq Viral
    """
    params:
        reference = config["path"]["database"]["RefSeq"] + "/viral.1.1.genomic.fna",
    input:
        rules.metaSpades.output.contigs,
    output:
        dir = directory(config["path"]["output"] + "/metaQUAST/"),
        report = config["path"]["output"] + "/metaQUAST/report.html",
        transposed_report = config["path"]["output"] + "/metaQUAST/combined_reference/transposed_report.tsv",
    message:
        "Running metaQUAST on {input}"
    conda:
        config["path"]["envs"] + "/metaQUAST.yaml"
    log:
        config["path"]["log"] + "/metaQUAST.log",
    benchmark:
        config["path"]["benchmark"] + "/metaQUAST.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["metaquast_mem"],
        # runtime=config["metaquast_time"],
    shell:
        """
        mkdir -p {output.dir}
        metaquast.py {input} -o {output.dir}\
        -r {params.reference} --threads {threads} --max-ref-number 0 &> {log}
        """

rule assembly:
    input:
        rules.metaSpades.output,
        rules.metaQUAST.output,
    output:
        config["path"]["temp"] + "/finished_assembly"
    threads: 1
    shell:
        """
        touch {output}
        """


# VIRAL IDENTIFICATION #

rule virsorter2_pass1:
    """
    Performes the first pass of viral identification with virsorter2
    """
    params:
        cutoff_length=config["virsorter2"]["pass1"]["min_lenght"],
        cutoff_score=config["virsorter2"]["pass1"]["min_score"],
    input:
        rules.metaSpades.output.contigs,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/virsorter2_pass1/{sample}/",
            sample=SAMPLE,
        )),
        combined = expand(
            config["path"]["output"] + "/virsorter2_pass1/{sample}/final-viral-combined.fa",
            sample=SAMPLE,
        )
    message:
        "Resources used; threads: {threads}"
    singularity:
        "docker://jiarong/virsorter:2.2.3"
    log:
        config["path"]["log"] + "/virsorter2_pass1.log",
    benchmark:
        config["path"]["benchmark"] + "/virsorter2_pass1.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["big_mem"],
        # runtime=config["normal_time"],
    shell:
        """
        mkdir -p {output.dir}
        virsorter run -w {output.dir} \
            -i {input} \
            -j {threads} --include-groups dsDNAphage,ssDNA,NCLDV,RNA,lavidaviridae \
            --min-length {params.cutoff_length} \
            --min-score {params.cutoff_score} \
            --keep-original-seq all\
            &> {log}
        """

rule vibrant_pass1:
    """
    Performes the first pass of viral identification with VIBRANT
    """
    input:
        rules.metaSpades.output.contigs,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/vibrant_pass1/{sample}/",
            sample=SAMPLE,
        )),
        combined = expand(
            config["path"]["output"] + "/vibrant_pass1/{sample}/final-viral-combined.fa",
            sample=SAMPLE,
        )
    params:
        db_dir=config["path"]["database"]["vibrant"] + "/databases",
        files_dir=config["path"]["database"]["vibrant"] + "/files",
        virome=vibrant_virome(config["vibrant"]["is_virome"]),
    conda:
        config["path"]["envs"] + "/vibrant.yaml"
    log:
        config["path"]["log"] + "/vibrant_pass1.log",
    benchmark:
        config["path"]["benchmark"] + "/vibrant_pass1.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["big_mem"],
        # runtime=config["normal_time"],
    shell:
        """
        mkdir -p {output.dir}
        VIBRANT_run.py -i {input}
            -t {threads}\
            -folder {output.dir}\
            -db {params.db_dir}\
            -files {params.files_dir}\
            {params.virome}\
            &> {log}
        """

rule checkv_virsorter2:
    """
    Performes Quality control on identified viral sequences
    """
    params:
        db_dir=config["path"]["database"]["checkv"],
    input:
        rules.virsorter2_pass1.output.combined,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/checkv/virsorter2_pass1/{sample}/",
            sample=SAMPLE,
        )),
        summary = expand(
            config["path"]["output"] + "/checkv/virsorter2_pass1/{sample}/quality_summary.tsv",
            sample=SAMPLE,
        ),
        combined=expand(
            config["path"]["output"] + "/checkv/virsorter2_pass1/{sample}/combined.fna",
            sample=SAMPLE
        ),
    conda:
        config["path"]["envs"] + "/checkv.yaml"
    log:
        config["path"]["log"] + "/checkv_virsorter2_pass1.log",
    benchmark:
        config["path"]["benchmark"] + "/checkv_virsorter2_pass1.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["normal_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        diamond makedb --in {params.db_dir}/genome_db/checkv_reps.faa \
            --db {params.db_dir}/genome_db/checkv_reps &> {log}
        checkv end_to_end {input} {output.dir} -t {threads} -d {params.db_dir} &>> {log}
        """

rule checkv_vibrant:
    """
    Performes Quality control on identified viral sequences
    """
    params:
        db_dir=config["path"]["database"]["checkv"],
    input:
        rules.vibrant_pass1.output.combined,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/checkv/vibrant_pass1/{sample}/",
            sample=SAMPLE,
        )),
        summary = expand(
            config["path"]["output"] + "/checkv/vibrant_pass1/{sample}/quality_summary.tsv",
            sample=SAMPLE,
        ),
        combined = expand(
            config["path"]["output"] + "/checkv/vibrant_pass1/{sample}/combined.fna",
            sample=SAMPLE,
        )
    conda:
        config["path"]["envs"] + "/checkv.yaml"
    log:
        config["path"]["log"] + "/checkv_vibrant_pass1.log",
    benchmark:
        config["path"]["benchmark"] + "/checkv_vibrant_pass1.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["normal_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        diamond makedb --in {params.db_dir}/genome_db/checkv_reps.faa \
            --db {params.db_dir}/genome_db/checkv_reps &> {log}
        checkv end_to_end {input} {output.dir} -t {threads} -d {params.db_dir} &>> {log}
        """

rule filter_contigs_virsorter2:
    """
    Gathers only relevant sequences with above threshold score
    """
    params:
        criteria = get_checkv_threshold(config["checkv_threshold"]),
    input:
        summary = rules.checkv_virsorter2.output.summary,
        combined = rules.virsorter2_pass1.output.combined,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/checkv/virsorter2_pass1/{sample}/filtered/",
            sample=SAMPLE,
        )),
        filtered_contigs_viruses=expand(
            config["path"]["output"] + "/checkv/virsorter2_pass1/{sample}/filtered/filtered_combined.fna",
            sample=SAMPLE,
        ),
        filtered_contigs_ID=expand(
            config["path"]["output"] + "/checkv/virsorter2_pass1/{sample}/filtered/filtered_contigs",
            sample=SAMPLE,
        )
    conda:
        config["path"]["envs"] + "/seqtk.yaml"
    benchmark:
        config["path"]["benchmark"] + "/filter_contigs_virsorter2.txt",
    log:
        config["path"]["log"] + "/filter_contigs_virsorter2.log",
    threads: config["threads"]
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        awk -F '\t' '{params.criteria}  {{print $1}}' {input.summary} > {output.filtered_contigs_ID}
        seqtk subseq {input.combined} {output.filtered_contigs_ID} > {output.filtered_contigs_viruses}
        """

rule filter_contigs_vibrant:
    """
    Gathers only relevant sequences with above threshold score
    """
    params:
        criteria=get_checkv_threshold(config["checkv_threshold"]),
    input:
        summary = rules.checkv_vibrant.output.summary,
        combined = rules.vibrant_pass1.output.combined,
    output:
        dir = directory(expand(
            config["path"]["output"] + "/checkv/vibrant_pass1/{sample}/filtered/",
            sample=SAMPLE,
        )),
        filtered_contigs_viruses=expand(
            config["path"]["output"] + "/checkv/vibrant_pass1/{sample}/filtered/filtered_combined.fna",
            sample=SAMPLE,
        ),
        filtered_contigs_ID=expand(
            config["path"]["output"] + "/checkv/vibrant_pass1/{sample}/filtered/filtered_contigs",
            sample=SAMPLE,
        )
    conda:
        config["path"]["envs"] + "/seqtk.yaml"
    benchmark:
        config["path"]["benchmark"] + "/filter_contigs_vibrant.txt",
    log:
        config["path"]["log"] + "/filter_contigs_vibrant.log",
    threads: config["threads"]
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        awk -F '\t' '{params.criteria}  {{print $1}}' {input.summary} > {output.filtered_contigs_ID}
        seqtk subseq {input.combined} {output.filtered_contigs_ID} > {output.filtered_contigs_viruses}
        """

rule combine_results_virsorter2:
    """
    Combine all results from virus identifiaction of all samples with virsorter2
    """
    input:
        rules.filter_contigs_virsorter2.output.filtered_contigs_viruses,
    output:
        dir = config["path"]["output"] + "/checkv/virsorter2_pass1/",
        combined = config["path"]["output"] + "/checkv/virsorter2_pass1/combined_virsorter2.tsv",
    conda:
        config["path"]["envs"] + "/cdhit.yaml"
    log:
        config["path"]["log"] + "/combine_results_virsorter2.log",
    threads: config["threads"]
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        cat {input} > {output.combined}
        """

rule combine_results_vibrant:
    """
    Combine all results from virus identifiaction of all samples with VIBRANT
    """
    input:
        rules.filter_contigs_vibrant.output.filtered_contigs_viruses,
    output:
        dir = config["path"]["output"] + "/checkv/vibrant_pass1/",
        combined = config["path"]["output"] + "/checkv/vibrant_pass1/combined_vibrant.tsv",
    conda:
        config["path"]["envs"] + "/cdhit.yaml"
    log:
        config["path"]["log"] + "/combine_results_vibrant.log",
    threads: config["threads"]
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        cat {input} > {output.combined}
        """

rule combine_all_results:
    """
    Combine all results from both virus identifiaction tools
    """
    input:
        vibrant=rules.combine_results_vibrant.output,
        virsorter2=rules.combine_results_virsorter2.output,
    output:
        dir = config["path"]["output"] + "/checkv/",
        combined = config["path"]["output"] + "/checkv/combined_all.fasta",
    conda:
        config["path"]["envs"] + "/cdhit.yaml"
    log:
        config["path"]["log"] + "/combine_all_results.log",
    threads: config["threads"]
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["tiny_time"],
    shell:
        """
        mkdir -p {output.dir}
        cat {input.vibrant} {input.virsorter2} > {output.combined}
        """

rule dereplication:
    """
    Performs dereplication with clustering on the viral sequences
    """
    input:
        rules.combine_all_results.output,
    output:
        dir = config["path"]["output"] + "/cdhit/",
        derep = config["path"]["output"] + "/cdhit/derep95_combined.fasta",
    conda:
        config["path"]["envs"] + "/cdhit.yaml"
    log:
        config["path"]["log"] + "/dereplication.log",
    threads: config["threads"]
    resources:
        mem_mb=config["normal_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        cd-hit-est\
        -T {threads}\
        -M {resources.mem_mb}\
        -i {input}\
        -o {output.derep}\
        -c 0.95\
        -aS 0.85\
        -n 9\
        -d 0\
        -p 1\
        -t 4\
        -g 1\
        &> {log}
        """

rule transform_vOTUs:
    """
    Renames viral sequences to unique vOTU_# names
    """
    input:
        rules.dereplication.output.derep,
    output:
        dir = config["path"]["output"] + "/vOTU/",
        vOTU = config["path"]["output"] + "/vOTU/vOTU_derep95_combined.fasta",
    resources:
        mem_mb=config["small_mem"],
        # runtime=config["tiny_time"],
    conda:
        config["path"]["envs"] + "/seqtk.yaml"
    log:
        config["path"]["log"] + "/transform_vOTUs.log",
    shell:
        """
        mkdir -p {output.dir}
        awk '/^>/{{print ">vOTU_" ++i; next}}{{print}}' {input} > {output.vOTU}
        """

rule virsorter2_pass2:
    """
    Runs virsorter2 on the vOTUs
    """
    params:
        cutoff_length=config["virsorter2"]["pass2"]["min_lenght"],
        cutoff_score=config["virsorter2"]["pass2"]["min_score"],
    input:
        rules.transform_vOTUs.output.vOTU,
    output:
        dir = config["path"]["output"] + "/virsorter2_pass2/",
        viral_combined = config["path"]["output"] + "/virsorter2_pass2/final-viral-combined.fa",
        contigs_dramv = config["path"]["output"] + "/virsorter2_pass2/for-dramv/viral-affi-contigs-for-dramv.tab",
        viral_combined_dramv = config["path"]["output"] + "/virsorter2_pass2/for-dramv/final-viral-combined-for-dramv.fa",
    message:
        "Resources used; threads: {threads}"
    benchmark:
        config["path"]["benchmark"] + "/virsorter2_pass2.txt",
    singularity:
        "docker://jiarong/virsorter:2.2.3"
    log:
        config["path"]["log"] + "/virsorter2_pass2.log",
    threads: config["threads"]
    resources:
        mem_mb=config["big_mem"],
        # runtime=config["normal_time"],
    shell:
        """
        mdkir -p {output.dir}
        virsorter run -w {output.dir} \
            --seqname-suffix-off\
            --viral-gene-enrich-off\
            --prep-for-dramv\
            -i {input} \
            -j {threads} --include-groups dsDNAphage,ssDNA,NCLDV,RNA,lavidaviridae \
            --min-length 3000 \
            --min-score 0.5 \
            --keep-original-seq all\
            &> {log}
        """

rule vibrant_pass2:
    """
    Runs VIBRANT on the vOTUs
    """
    input:
        rules.transform_vOTUs.output.vOTU,
    output:
        dir = directory(config["path"]["output"] + "/vibrant_pass2/"),
        phages_combined = config["path"]["output"] +
        "/vibrant_pass2/VIBRANT_vOTU_derep95_combined/VIBRANT_phages_vOTU_derep95_combined/vOTU_derep95_combined.phages_combined.fna",
    params:
        db_dir=config["path"]["database"]["vibrant"] + "/databases",
        files_dir=config["path"]["database"]["vibrant"] + "/files",
        virome=vibrant_virome(config["vibrant"]["is_virome"]),
    conda:
        config["path"]["envs"] + "/vibrant.yaml"
    log:
        config["path"]["log"] + "/vibrant_pass2.log",
    benchmark:
        config["path"]["benchmark"] + "/vibrant_pass2.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["big_mem"],
        # runtime=config["normal_time"],
    shell:
        """
        mkdir -p {output.dir}
        VIBRANT_run.py -i {input}\
            -t {threads}\
            -folder {output.dir}\
            -d {params.db_dir}\
            -m {params.files_dir}\
            {params.virome}\
            &> {log}
        """

rule checkv_vOTU_virsorter2:
    """
    Runs Quality control on the vOTUs after virsorter2
    """
    params:
        db_dir=config["path"]["database"]["checkv"],
    input:
        rules.virsorter2_pass2.output.viral_combined,
    output:
        dir = directory(config["path"]["output"] + "/checkv/virsorter2_pass2/"),
        summary = config["path"]["output"] + "/checkv/virsorter2_pass2/quality_summary.tsv",
    conda:
        config["path"]["envs"] + "/checkv.yaml"
    log:
        config["path"]["log"] + "/checkv_virsorter2_pass2.log",
    benchmark:
        config["path"]["benchmark"] + "/checkv_virsorter2_pass2.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["normal_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        diamond makedb --in {params.db_dir}/genome_db/checkv_reps.faa \
            --db {params.db_dir}/genome_db/checkv_reps &>{log}
        checkv end_to_end {input} {output.dir} -t {threads} -d {params.db_dir} &>> {log}
        """

rule checkv_vOTU_vibrant:
    """
    Runs Quality control on the vOTUs after VIBRANT
    """
    params:
        db_dir=config["path"]["database"]["checkv"],
    input:
        rules.vibrant_pass2.output.phages_combined,
    output:
        dir = directory(config["path"]["output"] + "/checkv/vibrant_pass2/"),
        summary = config["path"]["output"] + "/checkv/vibrant_pass2/quality_summary.tsv",
    conda:
        config["path"]["envs"] + "/checkv.yaml"
    log:
        config["path"]["log"] + "/checkv_vibrant_pass2.log",
    benchmark:
        config["path"]["benchmark"] + "/checkv_vibrant_pass2.txt",
    threads: config["threads"]
    resources:
        mem_mb=config["normal_mem"],
        # runtime=config["small_time"],
    shell:
        """
        mkdir -p {output.dir}
        diamond makedb --in {db_dir}/genome_db/checkv_reps.faa \
            --db {params.db_dir}/genome_db/checkv_reps &>{log}
        checkv end_to_end {input} {output.dir} -t {threads} -d {params.db_dir} &>> {log}
        """

rule identification:
    input:
        rules.virsorter2_pass1.output,
        rules.vibrant_pass1.output,
        rules.checkv_virsorter2.output,
        rules.checkv_vibrant.output,
        rules.filter_contigs_virsorter2.output,
        rules.filter_contigs_vibrant.output,
        rules.combine_results_virsorter2.output,
        rules.combine_results_vibrant.output,
        rules.combine_all_results.output,
        rules.dereplication.output,
        rules.transform_vOTUs.output,
        rules.virsorter2_pass2.output,
        rules.vibrant_pass2.output,
        rules.checkv_vOTU_virsorter2.output,
        rules.checkv_vOTU_vibrant.output,
    output:
        config["path"]["temp"] + "/finished_identification"
    threads: 1
    shell:
        """
        touch {output}
        """


rule all:
    input:
        rules.qc.output,
        rules.assembly.output,
        rules.identifiaction.output
    shell:
        """
        echo "All Done!"
        rm {input}
        """

